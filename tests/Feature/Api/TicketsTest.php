<?php

namespace Tests\Feature\Api;

use Illuminate\Foundation\Testing\RefreshDatabase;
use PHPUnit\Framework\Attributes\Test;
use Tests\TestCase;
use App\Models\Ticket;
use App\Models\User;

class TicketsTest extends TestCase
{
    use RefreshDatabase;

    #[Test]
    public function can_get_all_tickets(): void
    {
        User::factory(3)->create();

        $ticket = Ticket::factory()->create();

        $response = $this->getJson(route('tickets.index'));

        $response->assertOk();

        $response->assertJson([
            'tickets' => [
                'data' => [
                    [
                        'id' => $ticket->id,
                        'subject' => $ticket->subject,
                        'content' => $ticket->content,
                        'status' => $ticket->status,
                        'submitter_name' => $ticket->user->name,
                        'submitter_email' => $ticket->user->email,
                    ]
                ]
            ]
        ]);
    }

    #[Test]
    public function can_store_a_ticket(): void
    {
        User::factory(3)->create();

        $newTicket = Ticket::factory()->create();

        $response = $this->postJson(route('tickets.store'), $newTicket->toArray());

        $response->assertCreated();

        $response->assertJson([
            'data' => ['status' => $newTicket->status]
        ]);

        $this->assertDatabaseHas(
            'tickets',
            $newTicket->toArray()
        );
    }

    #[Test]
    public function can_update_status_of_a_ticket(): void
    {
        User::factory(3)->create();
        
        $existingTicket = Ticket::factory()->create();

        $response = $this->putJson(route('tickets.update', $existingTicket), $existingTicket->toArray());

        $response->assertJson([
            'data' => ['status' => true]
        ]);
    }

    #[Test]
    public function can_create_ticket_with_console_command(): void
    {
        User::factory(3)->create();

        // Create 3 tickets via the factory
        Ticket::factory(3)->create();

        // Create Another ticket with the command
        $this->artisan('app:create-ticket')
                ->expectsOutputToContain('Ticket created!')
                ->assertExitCode(0);

        // Check Databas should have all created tickets in
        $this->assertDatabaseCount('tickets', 4);
    }

    #[Test]
    public function can_update_a_ticket_with_console_command(): void
    {
        User::factory(3)->create();

        Ticket::factory()->create();

        $this->artisan('app:process-ticket')
                ->assertExitCode(0);
        
        // One ticket in Database status has been updated to true
        $this->assertDatabaseHas('tickets', [
            'status' => true
        ]);
    }

    #[Test]
    public function endpoint_will_only_show_unprocessed_tickets(): void
    {
        User::factory(3)->create();

        // Create 3 tickets in the DB
        Ticket::factory(3)->create();

        // Process 1 ticket
        $this->artisan('app:process-ticket')
                ->assertExitCode(0);

        // Run endpoint to get unprocessed tickets
        $response = $this->getJson(route('tickets.open'));

        // Response contains 2 tickets only
        $response->assertJsonCount(2, 'unprocessed_tickets.data');
    }

    #[Test]
    public function endpoint_will_only_show_processed_tickets(): void
    {
        User::factory(3)->create();

        // Create 3 tickets in the DB
        Ticket::factory(3)->create();

        // Process 1 ticket
        $this->artisan('app:process-ticket')
                ->assertExitCode(0);

        // Run endpoint to get processed tickets
        $response = $this->getJson(route('tickets.closed'));

        // Response contains 1 tickets only
        $response->assertJsonCount(1, 'processed_tickets.data');
    }
}
