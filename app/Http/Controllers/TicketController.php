<?php

namespace App\Http\Controllers;

use App\Models\Ticket;
use App\Models\User;
use Exception;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Http\Request;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\DB;

class TicketController
{
    /**
     * Display a list of all tickets.
     */
    public function index()
    {
        try {
            $tickets = DB::table('tickets')
                        ->join('users', 'tickets.user_id', '=', 'users.id')
                        ->select(
                            'tickets.id',
                            'tickets.subject',
                            'tickets.content',
                            'users.name as submitter_name',
                            'users.email as submitter_email',
                            'tickets.created_at',
                            'tickets.status'
                            )
                        ->orderBy('tickets.created_at')
                        ->paginate(10);

            if (empty($tickets->items())) {
                throw new Exception('No Tickets found in the database.');
            }

            return response()->json([
                'tickets' => $tickets
            ]);
        } catch (Exception $error) {
            return response()->json([
                $error->getMessage()
            ]);
        }
    }

    /**
     * Display a paginated to 10, list of all unprocessed tickets
     */
    public function getOpenTickets()
    {
        try{
            $tickets = DB::table('tickets')
                        ->join('users', 'tickets.user_id', '=', 'users.id')
                        ->select(
                            'tickets.id',
                            'tickets.subject',
                            'tickets.content',
                            'users.name as submitter_name',
                            'users.email as submitter_email',
                            'tickets.created_at',
                            'tickets.status'
                            )
                        ->where('tickets.status', false)
                        ->orderBy('tickets.created_at')
                        ->paginate(10);
                            
            if (empty($tickets->items())) {
                throw new Exception('No Unprocessed tickets found in the database.');
            }

            return response()->json([
                'unprocessed_tickets' => $tickets
            ]);
        } catch (Exception $error) {
            return response()->json([$error->getMessage()]);
        }
    }

    /**
     * Display a paginated to 10, list of all processed tickets
     */
    public function getClosedTickets()
    {
        try{
            $tickets = DB::table('tickets')
                        ->join('users', 'tickets.user_id', '=', 'users.id')
                        ->select(
                            'tickets.id',
                            'tickets.subject',
                            'tickets.content',
                            'users.name as submitter_name',
                            'users.email as submitter_email',
                            'tickets.created_at',
                            'tickets.status'
                            )
                        ->where('tickets.status', true)
                        ->orderBy('tickets.created_at')
                        ->paginate(10);
    
            if (empty($tickets->items())) {
                throw new Exception('No Processed tickets found in the database.');
            }
    
            return response()->json([
                'processed_tickets' => $tickets
            ]);
        } catch (Exception $error) {
            return response()->json([$error->getMessage()]);
        }
    }

    /**
     * Display a paginated to 10 list of all tickets created
     * by a certain user
     */
    public function getTicketsByUser(string $email)
    {
        try {
            if (DB::table('users')->select('users.*')->where('users.email', $email)->doesntExist()) {
                throw new Exception('User with the entered email address does not exist');
            }

            $tickets = DB::table('tickets')
                        ->join('users', 'tickets.user_id', '=', 'users.id')
                        ->select(
                            'tickets.id',
                            'tickets.subject',
                            'tickets.content',
                            'users.name as submitter_name',
                            'users.email as submitter_email',
                            'tickets.created_at',
                            'tickets.status'
                            )
                        ->where('users.email', $email)
                        ->orderBy('tickets.created_at')
                        ->paginate(10);
            
                if (empty($tickets->items())){
                    throw new Exception('No Tickets Found for this user');
                }
                
            return response()->json([
                'user_tickets' => $tickets
            ]);
        } catch (Exception $error) {
            return $error->getMessage();
        }
    }

    /**
     * Store a newly created ticket in the database.
     */
    public function store(Request $request)
    {
        $request->validate([
            'subject' => ['required', 'max:255'],
            'content' => ['required'],
            'status' => ['required', 'boolean']
        ]);

        return response()->json([
            'data' => Ticket::create($request->all())
        ], 201);
    }

    /**
     * Update the specified ticket in the database.
     */
    public function update(Request $request, Ticket $ticket)
    {
        $request->validate([
            'status' => ['required', 'boolean']
        ]);

        $ticket->update([
            'status' => true,
        ]);

        return response()->json([
            'data' => $ticket
        ]);
    }

    /**
     * Get stats related to the tickets in the database.
     */
    public function stats()
    {
        try {
            // Get the total number of tickets
            $totalTickets = Ticket::count();
    
            // Get the Total number of unprocessed tickets
            $openTickets = Ticket::where('status', false)->count();
    
            // Check the Database to find the user who has created the most tickets
            $highestTicketSubmitter = DB::table('tickets')
                                        ->join('users', 'tickets.user_id', '=', 'users.id')
                                        ->groupBy('users.email', 'users.name')
                                        ->orderByRaw('count(users.email) DESC')
                                        ->value('users.name');
    
            // Get the updated datetime of the last processed ticket
            $lastProcessed = Ticket::where('status', true)->pluck('updated_at')->last();
    
            // Convert the datetime to a unix timestamp
            $processedTime = Carbon::parse($lastProcessed)->timestamp;
    
            return response()->json([
                'data' => [
                    'total_tickets' => $totalTickets,
                    'unprocessed_tickets' => $openTickets,
                    'highest_submitter' => $highestTicketSubmitter,
                    'last_processed' => $processedTime,
                ]
                ]);
        } catch (Exception $error) {
            return $error->getMessage();
        }
    }
}
